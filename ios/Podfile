# ──────────  ios/Podfile  (drop-in complete file) ──────────
source 'https://cdn.cocoapods.org'   # default spec repo only

require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED']            = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods', :deterministic_uuids => false
prepare_react_native_project!

target 'DormMarketplaceApp' do
  use_expo_modules!

  pod 'YandexMobileAds', '7.13.0'   # pulls AppMetricaCore 5.11.2

  # ───── Expo autolinking helpers (unchanged) ─────
  config_cmd =
    if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
      ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"]
    else
      ['npx', 'expo-modules-autolinking', 'react-native-config', '--json', '--platform', 'ios']
    end
  config = use_native_modules!(config_cmd)

  link_mode = (podfile_properties['ios.useFrameworks'] || ENV['USE_FRAMEWORKS'])&.to_sym || :static
  use_frameworks! :linkage => link_mode

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => (podfile_properties['expo.jsEngine'].nil? || podfile_properties['expo.jsEngine'] == 'hermes'),
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false'
  )

  # ───── Post-install: Expo tweaks + AppMetrica stub ─────
  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled       => podfile_properties['apple.ccacheEnabled'] == 'true'
    )

    # disable resource-bundle code-sign (Expo template)
    installer.target_installation_results.pod_target_installation_results
      .each_value do |res|
      res.resource_bundle_targets.each do |bundle_t|
        bundle_t.build_configurations.each { |cfg| cfg.build_settings['CODE_SIGNING_ALLOWED'] = 'NO' }
      end
    end

    # ----------  Inject missing AMALibraryMigration320  ----------
    require 'fileutils'
    apm_target = installer.pods_project.targets.find { |t| t.name == 'AppMetricaCore' }
    next unless apm_target

    stub_dir = File.join(installer.sandbox.root, 'AppMetricaCore', 'StubMigration')
    FileUtils.mkdir_p(stub_dir)

    header_path = File.join(stub_dir, 'AMALibraryMigration320.h')
    impl_path   = File.join(stub_dir, 'AMALibraryMigration320.m')

    File.write(header_path, <<~HDR) unless File.exist?(header_path)
// Auto-generated stub — satisfies AppMetricaCore 5.11.x
#import <Foundation/Foundation.h>
@interface AMALibraryMigration320 : NSObject
@end
HDR

    File.write(impl_path, <<~SRC) unless File.exist?(impl_path)
#import "AMALibraryMigration320.h"
@implementation AMALibraryMigration320
@end
SRC

    # helper to add .m to the target once
    def add_file_to_target(project, target, path)
      file_ref = project.main_group.new_file(path)
      target.source_build_phase.add_file_reference(file_ref) unless
        target.source_build_phase.files_references.include?(file_ref)
    end

    add_file_to_target(installer.pods_project, apm_target, impl_path)
    add_file_to_target(installer.pods_project, apm_target, header_path)

    puts '● Injected stub AMALibraryMigration320.{h,m} into AppMetricaCore'
    # ---------------------------------------------------------------
  end
end
# ────────────────────────────────────────────────────────────────
